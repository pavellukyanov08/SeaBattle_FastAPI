"""Changed models

Revision ID: 2ab2ab5ea1ba
Revises: 753b6ebf05cd
Create Date: 2025-08-31 19:15:44.322272

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2ab2ab5ea1ba'
down_revision: Union[str, Sequence[str], None] = '753b6ebf05cd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('boards')
    op.drop_table('game_players')
    op.drop_constraint('games_winner_id_fkey', 'games', type_='foreignkey')
    op.alter_column('games', 'id',
                    existing_type=sa.VARCHAR(),
                    type_=sa.UUID(),
                    postgresql_using='id::uuid',
                    existing_nullable=False)
    op.alter_column('games', 'winner_id',
                    existing_type=sa.VARCHAR(),
                    type_=sa.UUID(),
                    postgresql_using='winner_id::uuid',
                    existing_nullable=True)
    op.alter_column('players', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.UUID(),
               postgresql_using='id::uuid',
               existing_nullable=False)
    op.add_column('games', sa.Column('player1_id', sa.UUID(), nullable=True))
    op.add_column('games', sa.Column('player2_id', sa.UUID(), nullable=True))
    op.add_column('games', sa.Column('board1', sa.JSON(), nullable=True))
    op.add_column('games', sa.Column('board2', sa.JSON(), nullable=True))
    op.create_foreign_key(None, 'games', 'players', ['player2_id'], ['id'])
    op.create_foreign_key(None, 'games', 'players', ['player1_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('players', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_constraint(None, 'games', type_='foreignkey')
    op.drop_constraint(None, 'games', type_='foreignkey')
    op.alter_column('games', 'winner_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('games', 'id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('games', 'board2')
    op.drop_column('games', 'board1')
    op.drop_column('games', 'player2_id')
    op.drop_column('games', 'player1_id')
    op.create_table('game_players',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('game_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('player_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_turn', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], name=op.f('game_players_game_id_fkey')),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('game_players_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('game_players_pkey'))
    )
    op.create_table('boards',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('game_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('player_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('moves', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], name=op.f('boards_game_id_fkey')),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], name=op.f('boards_player_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('boards_pkey'))
    )
    # ### end Alembic commands ###
